{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","height","padding","backdrop","zIndex","drawer","color","backgroundColor","paper","width","chippaper","display","flexWrap","overflow","cardValuePaper","cardTagPaper","formControl","minWidth","maxWidth","Flashcard","props","Card","align","raised","style","CardActionArea","onClick","handleShowFront","Typography","variant","showFront","frontValue","backValue","frontCard","backCard","CardActions","Grid","item","xs","Tooltip","title","IconButton","handleProgressChange","correct","handleCorrectChange","CardSetPaper","classes","Paper","paddingTop","paddingBottom","Container","container","spacing","alignItems","TextField","size","id","label","autoComplete","helperText","cardSetNameError","fullWidth","value","cardSetName","onChange","handleCardSetNameChange","error","frontCardError","handleFrontCardChange","backCardError","handleBackCardChange","sm","frontValueError","handleFrontValueChange","backValueError","handleBackValueChange","handleAddCard","handleReplaceCard","selectedCardValue","className","cardValues","map","card","num","enterDelay","placement","Chip","handleCardValueClick","onDelete","handleDeleteCardValue","deleteIcon","tagError","tag","handleTagChange","handleAddTag","tagValues","tagLabel","handleDeleteTag","justifyContent","Button","handleSubmitCardSet","startIcon","cardSetSelected","CardSetsDrawer","React","useState","setCardSetSelected","setCardSetName","setCardSetNameError","setFrontCard","setFrontCardError","setBackCard","setBackCardError","setFrontValue","setFrontValueError","setBackValue","setBackValueError","setCardValues","setSelectedCardValue","setTag","setTagError","setTagValues","settingsText","setSettingsText","localDialogOpen","setLocalDialogOpen","updatePaperValues","cs","fullCardSets","handleLocalStorageDialogClose","localStorage","setItem","SwipeableDrawer","anchor","open","rightDrawer","onClose","handleRightDrawer","onOpen","FormControl","Select","event","target","displayEmpty","MenuItem","cardSet","FormHelperText","newCardValues","slice","push","splice","includes","newTagValues","length","newCardSet","handleSuccessAlert","handleDownloadSettings","handleSaveLocalStorage","handleRefreshLocalStorage","getItem","Dialog","DialogTitle","DialogContent","DialogContentText","autoFocus","multiline","DialogActions","status","Snackbar","anchorOrigin","vertical","horizontal","successAlert","handleSuccessClose","autoHideDuration","elevation","severity","TestParameters","handleOrdering","ordering","handleFrontToBack","frontToBack","ChooseCardSets","search","setSearch","front","setFront","back","setBack","tagText","setTagText","selectedTags","setSelectedTags","showingCardSets","filteredSets","fullIndex","filter","toLowerCase","indexOf","some","filterCardSets","filteredTags","tagList","handleTagClick","selected","newSelectedTags","InputProps","startAdornment","InputAdornment","position","InputLabel","multiple","input","Input","frontList","backList","List","ListItem","button","dense","divider","selectedCardSets","newSelectedCardSets","Set","handleSelectAll","idx","ListItemIcon","Checkbox","checked","every","disableRipple","ListItemText","primary","ListItemSecondaryAction","edge","handleDeleteSelected","maxHeight","handleCardSetSelected","secondary","TestConfigDrawer","leftDrawer","handleLeftDrawer","handleTestCardSetSelected","concat","apply","testAlert","handleTestAlertClose","action","handleTestAlertCreate","TestCompletedDialog","handleCompletedClose","numcards","numcorrect","numincorrect","Math","round","disabled","HelpBackdrop","Backdrop","helpOpen","handleHelpOpen","App","prefersDarkMode","useMediaQuery","useMemo","createTheme","palette","type","typography","h1","fontSize","fontWeight","breakpoints","up","localFlashcardSettings","JSON","parse","setLeftDrawer","setRightDrawer","flashcardSettings","setOrdering","setFrontToBack","setFullCardSets","setSelectedCardSets","testCardSet","setTestCardSet","setShowFront","progress","setProgress","testCompletedOpen","setTestCompletedOpen","setHelpOpen","setSuccessAlert","setTestAlert","correctCards","incorrectCards","newTestCardSet","values","i","n","floor","random","newProgress","max","min","ThemeProvider","AppBar","Toolbar","order","fTB","newFullCardSets","currentIndex","reason","blob","Blob","stringify","href","URL","createObjectURL","link","document","createElement","download","body","appendChild","click","removeChild","settingsString","err","console","log","isCorrect","LinearProgress","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c15463a2.chunk.js","sourcesContent":["import flashcardSettings from './flashcardSettings.json';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport Typography from '@material-ui/core/Typography';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport LoopIcon from '@material-ui/icons/Loop';\nimport ShuffleIcon from '@material-ui/icons/Shuffle';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport CompareArrowsIcon from '@material-ui/icons/CompareArrows';\nimport SearchIcon from '@material-ui/icons/Search';\nimport DoneIcon from '@material-ui/icons/Done';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport FindReplaceIcon from '@material-ui/icons/FindReplace';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport HelpIcon from '@material-ui/icons/Help';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport PublishIcon from '@material-ui/icons/Publish';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport SaveIcon from '@material-ui/icons/Save';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Paper from '@material-ui/core/Paper';\nimport Chip from '@material-ui/core/Chip';\nimport Select from '@material-ui/core/Select';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport { createTheme, makeStyles, ThemeProvider } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport React, { useState } from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: \"100vh\",\n    padding: \"0px\",\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n    backgroundColor: \"rgba(20, 20, 20, 0.8)\"\n  },\n  paper: {\n    width: \"min(600px, 80%)\",\n  },\n  chippaper: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    height: 70,\n    overflow: \"auto\",\n  },\n  cardValuePaper: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    height: 170,\n    overflow: \"auto\",\n  },\n  cardTagPaper: {\n    display: \"flex\",\n    overflow: \"auto\",\n    height: 45,\n    padding: \"10px\",\n  },\n  formControl: {\n    width: \"100%\",\n    minWidth: \"100%\",\n    maxWidth: \"100%\",\n  },\n}));\n\nfunction Flashcard(props) {\n\n  return (\n    <Card align=\"center\" raised style={{ padding: \"10px\", height: \"100%\" }}>\n      <CardActionArea onClick={props.handleShowFront} style={{ height: \"calc(100% - 50px)\" }}>\n        <Typography variant=\"h1\" color=\"textPrimary\">\n          {props.showFront ? props.frontValue : props.backValue}\n        </Typography>\n        <Typography variant=\"body1\" color=\"textSecondary\">\n          showing: {props.showFront ? props.frontCard : props.backCard}\n        </Typography>\n        <Typography variant=\"body1\" color=\"textPrimary\">\n          other side: {props.showFront ? props.backCard : props.frontCard}\n        </Typography>\n      </CardActionArea>\n      <CardActions>\n        <Grid item xs={3}>\n          <Tooltip title=\"Previous card\">\n            <IconButton onClick={() => props.handleProgressChange(-1)}>\n              <NavigateBeforeIcon />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n        <Grid item xs={3}>\n          <Tooltip title={props.correct === false ? \"Undo mark as incorrect\" : \"Mark as incorrect and move to next card\"} >\n            <IconButton onClick={() => props.handleCorrectChange(props.correct === false ? null : false)}>\n              <CancelIcon color={props.correct === false ? \"primary\" : \"disabled\"} />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n        <Grid item xs={3}>\n          <Tooltip title={props.correct ? \"Undo mark as correct\" : \"Mark as correct and move to next card\"} >\n            <IconButton onClick={() => props.handleCorrectChange(props.correct ? null : true)}>\n              <CheckCircleIcon color={props.correct ? \"primary\" : \"disabled\"} />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n        <Grid item xs={3}>\n          <Tooltip title=\"Next card\">\n            <IconButton onClick={() => props.handleProgressChange(1)}>\n              <NavigateNextIcon />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n      </CardActions>\n    </Card >\n  )\n};\n\nfunction CardSetPaper(props) {\n  const classes = useStyles();\n\n  return (\n    <Paper variant=\"outlined\" style={{ paddingTop: \"5px\", paddingBottom: \"5px\" }}>\n      <Container>\n        <Grid container item xs={12} spacing={1} alignItems=\"center\">\n          <Grid item xs={12}>\n            <TextField\n              size=\"small\"\n              id=\"card-set-name\"\n              label=\"Card set name\"\n              autoComplete=\"off\"\n              helperText={props.cardSetNameError ? \"Cannot be blank\" : \"What do you want to call your card set?\"}\n              fullWidth\n              value={props.cardSetName}\n              onChange={props.handleCardSetNameChange}\n              error={props.cardSetNameError}\n            />\n          </Grid>\n          <Grid item xs={6}>\n            <TextField\n              size=\"small\"\n              id=\"front-card\"\n              label=\"Front of card\"\n              autoComplete=\"off\"\n              helperText={props.frontCardError ? \"Cannot be blank\" : \"e.g. English\"}\n              fullWidth\n              value={props.frontCard}\n              onChange={props.handleFrontCardChange}\n              error={props.frontCardError}\n            />\n          </Grid>\n          <Grid item xs={6}>\n            <TextField\n              size=\"small\"\n              id=\"back-card\"\n              label=\"Back of card\"\n              autoComplete=\"off\"\n              helperText={props.backCardError ? \"Cannot be blank\" : \"e.g. Sinhala\"}\n              fullWidth\n              value={props.backCard}\n              onChange={props.handleBackCardChange}\n              error={props.backCardError}\n            />\n          </Grid>\n          <Grid container item xs={12} sm={4} alignItems=\"center\" spacing={1}>\n            <Grid item xs={5} sm={12}>\n              <TextField\n                size=\"small\"\n                id=\"front-value\"\n                label=\"Front value\"\n                autoComplete=\"off\"\n                helperText={props.frontValueError ? \"Cannot be blank\" : \"e.g. Book\"}\n                fullWidth\n                value={props.frontValue}\n                onChange={props.handleFrontValueChange}\n                error={props.frontValueError}\n              />\n            </Grid>\n            <Grid item xs={5} sm={12}>\n              <TextField\n                size=\"small\"\n                id=\"back-value\"\n                label=\"Back value\"\n                autoComplete=\"off\"\n                helperText={props.backValueError ? \"Cannot be blank\" : \"e.g. පොත\"}\n                fullWidth\n                value={props.backValue}\n                onChange={props.handleBackValueChange}\n                error={props.backValueError}\n              />\n            </Grid>\n            <Grid container item xs={2} sm={12} >\n              <Grid item xs={12} sm={6}>\n                <Tooltip title=\"Add card\">\n                  <IconButton onClick={props.handleAddCard}>\n                    <AddCircleIcon color=\"primary\" />\n                  </IconButton>\n                </Tooltip>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <Tooltip title=\"Replace selected card\">\n                  <IconButton onClick={props.handleReplaceCard}>\n                    <FindReplaceIcon color={props.selectedCardValue !== -1 ? \"primary\" : \"disabled\"} />\n                  </IconButton>\n                </Tooltip>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12} sm={8}>\n            <Paper className={classes.cardValuePaper} variant=\"outlined\">\n              {props.cardValues.map((card, num) => {\n                return (\n                  <Tooltip\n                    key={num}\n                    title=\"Select card and use the replace button to update its value\"\n                    enterDelay={1000}\n                    placement=\"top\"\n                  >\n                    <Chip\n                      key={num}\n                      size=\"small\"\n                      label={card.frontValue + \" ↔ \" + card.backValue}\n                      onClick={() => props.handleCardValueClick(num)}\n                      onDelete={() => props.handleDeleteCardValue(num)}\n                      deleteIcon={<Tooltip title=\"Delete this card\"><CancelIcon /></Tooltip>}\n                      color={num === props.selectedCardValue ? \"primary\" : \"default\"}\n                    />\n                  </Tooltip>\n                )\n              })}\n            </Paper>\n          </Grid>\n          <Grid item xs={10} sm={4}>\n            <TextField\n              size=\"small\"\n              id=\"tag\"\n              label=\"Add some tags\"\n              autoComplete=\"off\"\n              helperText={props.tagError ? \"Cannot be blank\" : \"e.g. language / geography\"}\n              fullWidth\n              value={props.tag}\n              onChange={props.handleTagChange}\n              error={props.tagError}\n            />\n          </Grid>\n          <Grid item xs={2} sm={1}>\n            <Tooltip title=\"Add tag\">\n              <IconButton onClick={props.handleAddTag}>\n                <AddCircleIcon color=\"secondary\" />\n              </IconButton>\n            </Tooltip>\n          </Grid>\n          <Grid item xs={12} sm={7}>\n            <Paper className={classes.cardTagPaper} variant=\"outlined\">\n              {props.tagValues.map((tagLabel, num) => {\n                return (\n                  <Chip\n                    key={tagLabel}\n                    size=\"small\"\n                    label={tagLabel}\n                    onDelete={() => props.handleDeleteTag(num)}\n                    color=\"secondary\"\n                  />\n                )\n              })}\n            </Paper>\n          </Grid>\n          <Grid item xs={12} container justifyContent=\"flex-end\" style={{ padding: \"5px\" }}>\n            <Button variant=\"contained\" color=\"primary\" onClick={props.handleSubmitCardSet} startIcon={<PublishIcon />}>\n              {props.cardSetSelected === \"new\" ? \"Submit\" : \"Update\"} card set\n            </Button>\n          </Grid>\n        </Grid>\n      </Container>\n    </Paper>\n  )\n};\n\nfunction CardSetsDrawer(props) {\n  const classes = useStyles();\n  const [cardSetSelected, setCardSetSelected] = React.useState(\"new\");\n\n  const [cardSetName, setCardSetName] = React.useState(\"\");\n  const [cardSetNameError, setCardSetNameError] = React.useState(false);\n  const [frontCard, setFrontCard] = React.useState(\"\");\n  const [frontCardError, setFrontCardError] = React.useState(false);\n  const [backCard, setBackCard] = React.useState(\"\");\n  const [backCardError, setBackCardError] = React.useState(false);\n  const [frontValue, setFrontValue] = React.useState(\"\");\n  const [frontValueError, setFrontValueError] = React.useState(false);\n  const [backValue, setBackValue] = React.useState(\"\");\n  const [backValueError, setBackValueError] = React.useState(false);\n  const [cardValues, setCardValues] = React.useState([]);\n  const [selectedCardValue, setSelectedCardValue] = React.useState(-1);\n  const [tag, setTag] = React.useState(\"\");\n  const [tagError, setTagError] = React.useState(false);\n  const [tagValues, setTagValues] = React.useState([]);\n  const [settingsText, setSettingsText] = useState(\"\");\n  const [localDialogOpen, setLocalDialogOpen] = useState(false);\n\n  const handleCardSetChange = (event) => {\n    setCardSetSelected(event.target.value);\n    updatePaperValues(event.target.value);\n  };\n\n  const updatePaperValues = (cs) => {\n    setCardSetName(cs === \"new\" ? \"\" : props.fullCardSets[cs].cardSetName);\n    setFrontCard(cs === \"new\" ? \"\" : props.fullCardSets[cs].frontCard);\n    setBackCard(cs === \"new\" ? \"\" : props.fullCardSets[cs].backCard);\n    setFrontValue(\"\");\n    setBackValue(\"\");\n    setCardValues(cs === \"new\" ? [] : props.fullCardSets[cs].cardValues);\n    setTag(\"\");\n    setTagValues(cs === \"new\" ? [] : props.fullCardSets[cs].tagValues);\n    setCardSetNameError(false);\n    setFrontCardError(false);\n    setBackCardError(false);\n    setFrontValueError(false);\n    setBackValueError(false);\n    setTagError(false);\n  };\n\n  const handleCardSetNameChange = (event) => {\n    setCardSetName(event.target.value);\n    setCardSetNameError(false);\n  };\n\n  const handleFrontCardChange = (event) => {\n    setFrontCard(event.target.value);\n    setFrontCardError(false);\n  };\n\n  const handleBackCardChange = (event) => {\n    setBackCard(event.target.value);\n    setBackCardError(false);\n  };\n\n  const handleFrontValueChange = (event) => {\n    setFrontValue(event.target.value);\n    setFrontValueError(false);\n  };\n\n  const handleBackValueChange = (event) => {\n    setBackValue(event.target.value);\n    setBackValueError(false);\n  };\n\n  const handleTagChange = (event) => {\n    setTag(event.target.value);\n    setTagError(false);\n  };\n\n  const handleAddCard = () => {\n    if (frontValue === \"\" || backValue === \"\") {\n      setFrontValueError(frontValue === \"\");\n      setBackValueError(backValue === \"\");\n      return;\n    };\n    const newCardValues = cardValues.slice();\n    newCardValues.push({ frontValue: frontValue, backValue: backValue });\n    setCardValues(newCardValues);\n    setFrontValue(\"\");\n    setBackValue(\"\");\n  };\n\n  const handleCardValueClick = (num) => {\n    if (selectedCardValue === num) {\n      setSelectedCardValue(-1);\n      return;\n    };\n    setSelectedCardValue(num);\n    setFrontValue(cardValues[num].frontValue);\n    setBackValue(cardValues[num].backValue);\n  };\n\n  const handleDeleteCardValue = (num) => {\n    const newCardValues = cardValues.slice();\n    newCardValues.splice(num, 1);\n    setCardValues(newCardValues);\n    setSelectedCardValue(selectedCardValue > num ? selectedCardValue - 1 : (selectedCardValue === num ? -1 : selectedCardValue));\n  };\n\n  const handleReplaceCard = () => {\n    if (selectedCardValue === -1) {\n      return;\n    };\n    if (frontValue === \"\" || backValue === \"\") {\n      setFrontValueError(frontValue === \"\");\n      setBackValueError(backValue === \"\");\n      return;\n    };\n    const newCardValues = cardValues.slice();\n    newCardValues.splice(selectedCardValue, 1, { frontValue: frontValue, backValue: backValue });\n    setCardValues(newCardValues);\n    setFrontValue(\"\");\n    setBackValue(\"\");\n  };\n\n  const handleAddTag = () => {\n    if (tagValues.includes(tag) || tag === \"\") {\n      setTagError(tag === \"\");\n      return;\n    };\n    const newTagValues = tagValues.slice();\n    newTagValues.push(tag);\n    setTagValues(newTagValues);\n    setTag(\"\");\n  };\n\n  const handleDeleteTag = (num) => {\n    const newTagValues = tagValues.slice();\n    newTagValues.splice(num, 1);\n    setTagValues(newTagValues);\n  };\n\n  const handleSubmitCardSet = () => {\n    if (cardSetName === \"\" || frontCard === \"\" || backCard === \"\" || cardValues.length === 0) {\n      setCardSetNameError(cardSetName === \"\");\n      setFrontCardError(frontCard === \"\");\n      setBackCardError(backCard === \"\");\n      setFrontValueError(cardValues.length === 0);\n      setBackValueError(cardValues.length === 0);\n      return;\n    };\n    const newCardSet = {\n      cardSetName: cardSetName,\n      frontCard: frontCard,\n      backCard: backCard,\n      cardValues: cardValues,\n      tagValues: tagValues\n    };\n    props.handleSubmitCardSet(newCardSet, cardSetSelected);\n    props.handleSuccessAlert(cardSetSelected === \"new\" ? \"new\" : \"updated\");\n    setCardSetSelected(\"new\");\n    updatePaperValues(\"new\");\n  };\n\n  const handleRefreshLocalStorage = () => {\n    props.handleRefreshLocalStorage();\n    setCardSetSelected(\"new\");\n    updatePaperValues(\"new\");\n  };\n\n  const handleSettingsTextChange = (event) => {\n    setSettingsText(event.target.value);\n  };\n\n  const handleOpenLocalStorageDialog = () => {\n    setLocalDialogOpen(true);\n    setSettingsText(localStorage.getItem(\"flashcardSettingsString\"))\n  };\n\n  const handleLocalStorageDialogClose = (value) => {\n    setLocalDialogOpen(false);\n    if (value === \"add\") {\n      localStorage.setItem(\"flashcardSettingsString\", settingsText);\n      props.handleLocalStorageDialogClose();\n    };\n  };\n\n  return (\n    <SwipeableDrawer anchor=\"right\" open={props.rightDrawer} onClose={() => props.handleRightDrawer(false)} onOpen={() => props.handleRightDrawer(true)} classes={{ paper: classes.paper }}>\n      <Container>\n        <Grid container alignItems=\"center\" spacing={2}>\n          <Grid item xs={12} style={{ paddingTop: \"30px\", width: 100 }}>\n            <FormControl className={classes.formControl}>\n              <Select\n                value={cardSetSelected}\n                onChange={handleCardSetChange}\n                displayEmpty\n              >\n                <MenuItem key=\"new\" value=\"new\">\n                  <em>New Card Set</em>\n                </MenuItem>\n                {props.fullCardSets.map((cardSet, num) => {\n                  return (\n                    <MenuItem key={num} value={num}>{cardSet.cardSetName}</MenuItem>\n                  )\n                })}\n              </Select>\n              <FormHelperText>Choose your card set</FormHelperText>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12}>\n            <CardSetPaper\n              cardSetSelected={cardSetSelected}\n              cardSetName={cardSetName}\n              cardSetNameError={cardSetNameError}\n              handleCardSetNameChange={handleCardSetNameChange}\n              frontCard={frontCard}\n              frontCardError={frontCardError}\n              handleFrontCardChange={handleFrontCardChange}\n              backCard={backCard}\n              backCardError={backCardError}\n              handleBackCardChange={handleBackCardChange}\n              frontValue={frontValue}\n              frontValueError={frontValueError}\n              handleFrontValueChange={handleFrontValueChange}\n              backValue={backValue}\n              backValueError={backValueError}\n              handleBackValueChange={handleBackValueChange}\n              cardValues={cardValues}\n              selectedCardValue={selectedCardValue}\n              handleAddCard={handleAddCard}\n              handleCardValueClick={handleCardValueClick}\n              handleDeleteCardValue={handleDeleteCardValue}\n              handleReplaceCard={handleReplaceCard}\n              tag={tag}\n              tagError={tagError}\n              handleTagChange={handleTagChange}\n              tagValues={tagValues}\n              handleAddTag={handleAddTag}\n              handleDeleteTag={handleDeleteTag}\n              handleSubmitCardSet={handleSubmitCardSet}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Button variant=\"contained\" color=\"primary\" onClick={props.handleDownloadSettings} startIcon={<GetAppIcon />}>\n              Download card sets & settings\n            </Button>\n          </Grid>\n          <Grid item xs={12}>\n            <Button variant=\"contained\" color=\"primary\" onClick={props.handleSaveLocalStorage} startIcon={<SaveIcon />}>\n              Save to local storage\n            </Button>\n          </Grid>\n          <Grid item xs={12}>\n            <Button variant=\"contained\" color=\"primary\" onClick={handleRefreshLocalStorage} startIcon={<RefreshIcon />}>\n              Refresh from local storage\n            </Button>\n          </Grid>\n          <Grid item xs={12}>\n            <Button variant=\"contained\" color=\"primary\" onClick={handleOpenLocalStorageDialog} startIcon={<LaunchIcon />}>\n              Add manually to local storage\n            </Button>\n          </Grid>\n          <Dialog onClose={handleLocalStorageDialogClose} open={localDialogOpen}>\n            <DialogTitle>Edit your flashcardSettings directly in localStorage</DialogTitle>\n            <DialogContent>\n              <DialogContentText>\n                If you have a JSON file which you would like to make use of, open it and copy/paste the text into here and click\n                \"add\" to add to your localStorage variables. To then make use of the settings, use the \"refresh from local storage\" button.\n              </DialogContentText>\n              <TextField\n                autoFocus\n                fullWidth\n                label=\"flashcardSettings JSON\"\n                id=\"settings\"\n                autoComplete=\"off\"\n                multiline\n                value={settingsText}\n                onChange={handleSettingsTextChange}\n              />\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={() => handleLocalStorageDialogClose(null)} color=\"primary\">\n                Cancel\n              </Button>\n              <Button onClick={() => handleLocalStorageDialogClose(\"add\")} color=\"primary\">\n                Add\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </Grid>\n        {[\"new\", \"updated\", \"saved\", \"refresh\", \"not refreshed\", \"manually saved\"].map((status) => {\n          return (\n            <Snackbar\n              anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\n              open={props.successAlert === status}\n              onClose={props.handleSuccessClose}\n              autoHideDuration={3000}\n              key={status}\n            >\n              <MuiAlert key={status} elevation={6} variant=\"filled\" onClose={props.handleSuccessClose} severity={status !== \"not refreshed\" ? \"success\" : \"error\"}>\n                {\n                  (status === \"new\") ?\n                    \"New card set added!\"\n                    : (status === \"updated\") ?\n                      \"Card set successfully updated!\"\n                      : (status === \"saved\") ?\n                        \"Saved to localStorage!\"\n                        : (status === \"refresh\") ?\n                          \"Settings refreshed from localStorage!\"\n                          : (status === \"not refreshed\") ?\n                            \"Problem with localStorage. Nothing saved or incorrect format!\"\n                            : \"Manual update of localStorage successful!\"\n                }\n              </MuiAlert>\n            </Snackbar>\n          )\n        })\n        }\n      </Container>\n    </SwipeableDrawer>\n  )\n};\n\nfunction TestParameters(props) {\n\n  return (\n    <Grid item xs={12} container alignItems=\"center\">\n      <Grid item xs={8}>\n        <Typography variant=\"subtitle1\" color=\"textPrimary\">\n          Ordering\n        </Typography>\n      </Grid>\n      <Grid item xs={2}>\n        <Tooltip title=\"In order\">\n          <IconButton onClick={() => props.handleOrdering(\"ordered\")}>\n            <LoopIcon color={props.ordering === \"ordered\" ? \"secondary\" : \"disabled\"} />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n      <Grid item xs={2}>\n        <Tooltip title=\"Shuffle\">\n          <IconButton onClick={() => props.handleOrdering(\"shuffle\")}>\n            <ShuffleIcon color={props.ordering === \"shuffle\" ? \"secondary\" : \"disabled\"} />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n      <Grid item xs={6}>\n        <Typography variant=\"subtitle1\" color=\"textPrimary\">\n          Card direction\n        </Typography>\n      </Grid>\n      <Grid item xs={2}>\n        <Tooltip title=\"Show the front of the card first\">\n          <IconButton onClick={() => props.handleFrontToBack(\"frontFirst\")}>\n            <ArrowForwardIcon color={props.frontToBack === \"frontFirst\" ? \"secondary\" : \"disabled\"} />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n      <Grid item xs={2}>\n        <Tooltip title=\"Show the back of the card first\">\n          <IconButton onClick={() => props.handleFrontToBack(\"backFirst\")}>\n            <ArrowBackIcon color={props.frontToBack === \"backFirst\" ? \"secondary\" : \"disabled\"} />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n      <Grid item xs={2}>\n        <Tooltip title=\"Mix between front and back\">\n          <IconButton onClick={() => props.handleFrontToBack(\"mixed\")}>\n            <CompareArrowsIcon color={props.frontToBack === \"mixed\" ? \"secondary\" : \"disabled\"} />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n    </Grid>\n  )\n};\n\nfunction ChooseCardSets(props) {\n  const classes = useStyles();\n  const [search, setSearch] = React.useState(\"\");\n  const [front, setFront] = React.useState([]);\n  const [back, setBack] = React.useState([]);\n  const [tagText, setTagText] = React.useState(\"\");\n  const [selectedTags, setSelectedTags] = React.useState([]);\n\n  const filterCardSets = (fullCardSets) => {\n    let filteredSets = fullCardSets.map((cardSet, num) => { return ({ ...cardSet, fullIndex: num }) });\n    filteredSets = filteredSets.filter(cardSet => cardSet.cardSetName.toLowerCase().includes(search));\n    filteredSets = filteredSets.filter(cardSet => front.length === 0 || front.indexOf(cardSet.frontCard) !== -1);\n    filteredSets = filteredSets.filter(cardSet => back.length === 0 || back.indexOf(cardSet.backCard) !== -1);\n    filteredSets = filteredSets.filter(cardSet => selectedTags.length === 0 || selectedTags.some(tag => cardSet.tagValues.indexOf(tag) !== -1))\n    return filteredSets;\n  }\n  // Below is not a state value but we store it in a variable for convenience.\n  const showingCardSets = filterCardSets(props.fullCardSets);\n\n  const filteredTags = props.tagList.filter(tag => tag.includes(tagText));\n\n  const handleSearchChange = (event) => {\n    setSearch(event.target.value);\n  };\n\n  const handleFrontChange = (event) => {\n    setFront(event.target.value);\n  };\n\n  const handleBackChange = (event) => {\n    setBack(event.target.value);\n  };\n\n  const handleTagTextChange = (event) => {\n    setTagText(event.target.value);\n  };\n\n  const handleTagClick = (tag, selected) => {\n    const newSelectedTags = selectedTags.slice()\n    if (selected) {\n      newSelectedTags.push(tag)\n    } else {\n      newSelectedTags.splice(newSelectedTags.indexOf(tag), 1)\n    }\n    setSelectedTags(newSelectedTags);\n  };\n\n  const handleSelectAll = () => {\n    if (showingCardSets.some(cardSet => props.selectedCardSets.indexOf(cardSet.fullIndex) === -1)) {\n      const newSelectedCardSets = [...new Set([...props.selectedCardSets, ...showingCardSets.map((cardSet) => cardSet.fullIndex)])];\n      props.handleSelectAll(newSelectedCardSets);\n    } else {\n      const newSelectedCardSets = props.selectedCardSets.filter(idx => showingCardSets.map((cardSet) => cardSet.fullIndex).indexOf(idx) === -1);\n      props.handleSelectAll(newSelectedCardSets);\n    };\n  };\n\n  const handleClearFilters = () => {\n    setSearch(\"\");\n    setFront([]);\n    setBack([]);\n    setTagText(\"\");\n    setSelectedTags([]);\n  };\n\n  return (\n    <Grid item xs={12} container alignItems=\"center\">\n      <Grid item xs={10}>\n        <Typography variant=\"subtitle2\" color=\"textPrimary\">\n          Choose your card set(s) using the search and filters below\n        </Typography>\n      </Grid>\n      <Grid item xs={2}>\n        <Tooltip title=\"Clear filters\">\n          <IconButton onClick={handleClearFilters}>\n            <FilterListIcon color={search !== \"\" || front.length !== 0 || back.length !== 0 || selectedTags.length !== 0 ? \"secondary\" : \"disabled\"} />\n          </IconButton>\n        </Tooltip>\n      </Grid>\n      <Grid container item xs={12} spacing={1}>\n        <Grid container item xs={12} sm={6} spacing={1}>\n          <Grid item xs={12}>\n            <TextField\n              fullWidth\n              id=\"search\"\n              label=\"Search\"\n              autoComplete=\"off\"\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <SearchIcon />\n                  </InputAdornment>\n                )\n              }}\n              helperText=\"Use this to search the card set names.\"\n              value={search}\n              onChange={handleSearchChange}\n            />\n          </Grid>\n          <Grid item xs={6}>\n            <FormControl className={classes.formControl}>\n              <InputLabel>Front</InputLabel>\n              <Select\n                multiple\n                value={front}\n                onChange={handleFrontChange}\n                input={<Input />}\n              //MenuProps={MenuProps}\n              >\n                {props.frontList.map((front) => (\n                  <MenuItem key={front} value={front}>\n                    {front}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={6}>\n            <FormControl className={classes.formControl}>\n              <InputLabel>Back</InputLabel>\n              <Select\n                multiple\n                value={back}\n                onChange={handleBackChange}\n                input={<Input />}\n              //MenuProps={MenuProps}\n              >\n                {props.backList.map((back) => (\n                  <MenuItem key={back} value={back}>\n                    {back}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n        </Grid>\n        <Grid container item xs={12} sm={6} spacing={1}>\n          <Grid item xs={12}>\n            <TextField\n              fullWidth\n              label=\"Tags\"\n              id=\"tags\"\n              autoComplete=\"off\"\n              value={tagText}\n              onChange={handleTagTextChange}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Paper className={classes.chippaper} variant=\"outlined\">\n              {filteredTags.map((tag) => {\n                return (\n                  <Chip\n                    key={tag}\n                    size=\"small\"\n                    label={tag}\n                    onClick={() => handleTagClick(tag, true)}\n                    onDelete={() => handleTagClick(tag, false)}\n                    deleteIcon={selectedTags.indexOf(tag) !== -1 ? <CancelIcon /> : <DoneIcon />}\n                    color={selectedTags.indexOf(tag) !== -1 ? \"secondary\" : \"default\"}\n                  />\n                )\n              })}\n            </Paper>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={12}>\n        <List>\n          <ListItem button dense divider onClick={handleSelectAll}>\n            <ListItemIcon>\n              <Checkbox\n                checked={showingCardSets.length > 0 && showingCardSets.every(cardSet => props.selectedCardSets.indexOf(cardSet.fullIndex) !== -1)}\n                disableRipple />\n            </ListItemIcon>\n            <ListItemText primary=\"Select all\" />\n            <ListItemSecondaryAction>\n              <Tooltip title=\"Delete selected\">\n                <IconButton edge=\"end\" onClick={props.handleDeleteSelected}>\n                  <DeleteIcon color={props.selectedCardSets.length === 0 ? \"disabled\" : \"secondary\"} />\n                </IconButton>\n              </Tooltip>\n            </ListItemSecondaryAction>\n          </ListItem>\n        </List>\n        <List style={{ maxHeight: \"50vh\", overflow: \"auto\" }}>\n          {showingCardSets.map((cardSet) => {\n            return (\n              <ListItem key={cardSet.fullIndex} button dense onClick={props.handleCardSetSelected(cardSet.fullIndex)}>\n                <ListItemIcon>\n                  <Checkbox\n                    checked={props.selectedCardSets.indexOf(cardSet.fullIndex) !== -1}\n                    disableRipple />\n                </ListItemIcon>\n                <ListItemText primary={cardSet.cardSetName} secondary={cardSet.frontCard + \" ↔ \" + cardSet.backCard} />\n              </ListItem>\n            )\n          })}\n        </List>\n      </Grid>\n    </Grid>\n  )\n};\n\nfunction TestConfigDrawer(props) {\n  const classes = useStyles();\n\n  return (\n    <SwipeableDrawer anchor=\"left\" open={props.leftDrawer} onClose={() => props.handleLeftDrawer(false)} onOpen={() => props.handleLeftDrawer(true)} classes={{ paper: classes.paper }}>\n      <Container>\n        <Grid container alignItems=\"center\">\n          <Grid item xs={12} container justifyContent=\"flex-end\" style={{ padding: \"5px\" }}>\n            <Button variant=\"contained\" color=\"primary\" onClick={props.handleTestCardSetSelected}>\n              Start new test\n            </Button>\n          </Grid>\n          <TestParameters\n            ordering={props.ordering}\n            handleOrdering={props.handleOrdering}\n            frontToBack={props.frontToBack}\n            handleFrontToBack={props.handleFrontToBack}\n          />\n          <ChooseCardSets\n            fullCardSets={props.fullCardSets}\n            frontList={[...new Set(props.fullCardSets.map((cardSet) => cardSet.frontCard))]}\n            backList={[...new Set(props.fullCardSets.map((cardSet) => cardSet.backCard))]}\n            tagList={[...new Set([].concat.apply([], props.fullCardSets.map((cardSet) => cardSet.tagValues)))]}\n            handleDeleteSelected={props.handleDeleteSelected}\n            selectedCardSets={props.selectedCardSets}\n            handleCardSetSelected={props.handleCardSetSelected}\n            handleSelectAll={props.handleSelectAll}\n          />\n        </Grid>\n        <Snackbar\n          anchorOrigin={{ vertical: \"bottom\", horizontal: \"left\" }}\n          open={props.testAlert === \"select\"}\n          onClose={props.handleTestAlertClose}\n          autoHideDuration={3000}\n        >\n          <MuiAlert elevation={6} variant=\"filled\" onClose={props.handleTestAlertClose} severity=\"info\">\n            Nothing selected. Choose some card sets to get started!\n          </MuiAlert>\n        </Snackbar>\n        <Snackbar\n          anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n          open={props.testAlert === \"empty\"}\n          onClose={props.handleTestAlertClose}\n          autoHideDuration={5000}\n        >\n          <MuiAlert\n            elevation={6}\n            variant=\"filled\"\n            onClose={props.handleTestAlertClose}\n            severity=\"info\"\n            action={\n              <Button variant=\"contained\" onClick={props.handleTestAlertCreate} color=\"default\">\n                Create\n              </Button>\n            }>\n            You don't have any card sets. Create/load some using the menu up here!\n          </MuiAlert>\n        </Snackbar>\n      </Container>\n    </SwipeableDrawer>\n  )\n};\n\nfunction TestCompletedDialog(props) {\n\n  return (\n    <Dialog onClose={props.handleCompletedClose} open={props.open}>\n      <DialogTitle>Card set completed!</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          Cards reviewed: {props.numcards}\n          <br />Marked correct: {props.numcorrect}\n          <br />Marked incorrect: {props.numincorrect}\n          <br />Score (marked): {props.numcorrect === 0 ? 0 : Math.round(100 * props.numcorrect / (props.numcorrect + props.numincorrect))}%\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={() => props.handleCompletedClose(\"review\")} color=\"primary\" disabled={props.numincorrect === 0}>\n          Review incorrect cards\n        </Button>\n      </DialogActions>\n      <DialogActions>\n        <Button onClick={() => props.handleCompletedClose(\"new\")} color=\"primary\">\n          New test\n        </Button>\n        <Button onClick={() => props.handleCompletedClose(\"restart\")} color=\"primary\">\n          Restart test\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nfunction HelpBackdrop(props) {\n  const classes = useStyles();\n\n  return (\n    <Backdrop className={classes.backdrop} open={props.helpOpen} onClick={() => props.handleHelpOpen(false)}>\n\n      <Container maxWidth=\"lg\" className={classes.root} style={{ paddingTop: \"64px\" }}>\n        <Grid container alignItems=\"stretch\" style={{ height: \"100%\" }}>\n          <Grid container>\n            <Grid item xs={6} container>\n              <Grid item xs={1} container justifyContent=\"center\">\n                <ArrowUpwardIcon />\n              </Grid>\n              <Grid item xs={10} sm={7}>\n                <Typography variant=\"subtitle1\">\n                  Use this menu to select which card sets you want to test,\n                  which order you want to see the cards in (ordered/shuffled), whether front\n                  first or back first, and also delete card sets from this menu.\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid item xs={6} container justifyContent=\"flex-end\" alignItems=\"baseline\">\n              <Grid item xs={10} sm={7}>\n                <Typography variant=\"subtitle1\">\n                  Use this menu create new card sets or modify existing card sets.\n                </Typography>\n              </Grid>\n              <Grid item xs={1} container justifyContent=\"center\">\n                <ArrowUpwardIcon />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12} container>\n            <Grid item xs={12} sm={4}>\n              <Typography variant=\"subtitle1\">\n                Tap the main card area to flip between the front and back of the card.\n              </Typography>\n            </Grid>\n          </Grid>\n          <Grid item xs={12} container>\n            <Grid item xs={12} sm={4}>\n              <Typography variant=\"subtitle1\">\n                Use the navigation buttons to move forwards or backwards through your test card set and mark yourself as correct or incorrect (hover for more info).\n              </Typography>\n            </Grid>\n          </Grid>\n          <Grid item xs={12} container>\n            <Grid item xs={12} sm={4}>\n              <Typography variant=\"subtitle1\">\n                The bottom area keeps track of your progress through the card set and updates as you go.\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n\n      </Container>\n    </Backdrop >\n  )\n}\n\nfunction App(props) {\n  const classes = useStyles();\n\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const theme = React.useMemo(\n    () =>\n      createTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n      }),\n    [prefersDarkMode],\n  );\n\n  theme.typography.h1 = {\n    fontSize: '3rem',\n    fontWeight: 400,\n    '@media (min-width:600px)': {\n      fontSize: '4rem',\n    },\n    [theme.breakpoints.up('md')]: {\n      fontSize: '5rem',\n    },\n  };\n\n  const localFlashcardSettings = JSON.parse(localStorage.getItem(\"flashcardSettingsString\"));\n\n  const [leftDrawer, setLeftDrawer] = React.useState(false);\n  const [rightDrawer, setRightDrawer] = React.useState(false);\n  const [ordering, setOrdering] = React.useState(localFlashcardSettings === null ? flashcardSettings.ordering : (localFlashcardSettings.ordering ? localFlashcardSettings.ordering : flashcardSettings.ordering));\n  const [frontToBack, setFrontToBack] = React.useState(localFlashcardSettings === null ? flashcardSettings.frontToBack : (localFlashcardSettings.frontToBack ? localFlashcardSettings.frontToBack : flashcardSettings.frontToBack));\n  const [fullCardSets, setFullCardSets] = React.useState(localFlashcardSettings === null ? flashcardSettings.fullCardSets : (localFlashcardSettings.fullCardSets ? localFlashcardSettings.fullCardSets : flashcardSettings.fullCardSets));\n  const [selectedCardSets, setSelectedCardSets] = React.useState([]);\n  const [testCardSet, setTestCardSet] = React.useState([]);\n  const [showFront, setShowFront] = useState(localFlashcardSettings === null ? flashcardSettings.frontToBack !== \"backFirst\" : (localFlashcardSettings.frontToBack ? localFlashcardSettings.frontToBack !== \"backFirst\" : flashcardSettings.frontToBack !== \"backFirst\"));\n  const [progress, setProgress] = React.useState(0);\n  const [testCompletedOpen, setTestCompletedOpen] = useState(false);\n  const [helpOpen, setHelpOpen] = useState(false);\n  const [successAlert, setSuccessAlert] = useState(null);\n  const [testAlert, setTestAlert] = useState(null);\n\n  const correctCards = testCardSet.filter(cardSet => cardSet.correct === true).length;\n  const incorrectCards = testCardSet.filter(cardSet => cardSet.correct === false).length;\n\n  const handleSubmitCardSet = (newCardSet, cardSetSelected) => {\n    const newFullCardSets = fullCardSets.slice();\n    if (cardSetSelected === \"new\") {\n      newFullCardSets.push(newCardSet);\n    } else {\n      newFullCardSets.splice(cardSetSelected, 1, newCardSet);\n    };\n    setFullCardSets(newFullCardSets);\n  };\n\n  const handleDownloadSettings = () => {\n    const blob = new Blob([JSON.stringify({ ordering: ordering, frontToBack: frontToBack, fullCardSets: fullCardSets })], { type: 'application/json' });\n    const href = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = href;\n    link.download = \"flashcardSettings.json\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const handleSaveLocalStorage = () => {\n    const settingsString = JSON.stringify({ ordering: ordering, frontToBack: frontToBack, fullCardSets: fullCardSets });\n    localStorage.setItem(\"flashcardSettingsString\", settingsString);\n    setSuccessAlert(\"saved\");\n  };\n\n  const handleRefreshLocalStorage = () => {\n    const localFlashcardSettings = JSON.parse(localStorage.getItem(\"flashcardSettingsString\"));\n    if (localFlashcardSettings !== null) {\n      try {\n        setOrdering(localFlashcardSettings.ordering);\n        setFrontToBack(localFlashcardSettings.frontToBack);\n        setFullCardSets(localFlashcardSettings.fullCardSets);\n        setShowFront(localFlashcardSettings.frontToBack !== \"backFirst\");\n        setSuccessAlert(\"refresh\");\n        return;\n      } catch (err) {\n        console.log(err);\n      };\n    }\n    setSuccessAlert(\"not refreshed\");\n  };\n\n  const handleLocalStorageDialogClose = () => {\n    setSuccessAlert(\"manually saved\");\n  };\n\n  const handleDeleteSelected = () => {\n    const newFullCardSets = fullCardSets.filter((cardSet, num) => selectedCardSets.indexOf(num) === -1)\n    setFullCardSets(newFullCardSets);\n    setSelectedCardSets([]);\n  };\n\n  const handleCardSetSelected = (value) => () => {\n    const currentIndex = selectedCardSets.indexOf(value);\n    const newSelectedCardSets = selectedCardSets.slice();\n\n    if (currentIndex === -1) {\n      newSelectedCardSets.push(value);\n    } else {\n      newSelectedCardSets.splice(currentIndex, 1);\n    }\n\n    setSelectedCardSets(newSelectedCardSets);\n  };\n\n  const handleSelectAll = (newSelectedCardSets) => {\n    setSelectedCardSets(newSelectedCardSets);\n  };\n\n  const handleLeftDrawer = (value) => {\n    setLeftDrawer(value);\n  };\n\n  const handleRightDrawer = (value) => {\n    setRightDrawer(value);\n  };\n\n  const handleTestCardSetSelected = () => {\n    let newTestCardSet = fullCardSets.filter((cardSet, idx) => selectedCardSets.indexOf(idx) !== -1);\n    newTestCardSet = [].concat.apply([], newTestCardSet.map(cardSet => cardSet.cardValues.map(values => { return ({ ...values, cardSetName: cardSet.cardSetName, frontCard: cardSet.frontCard, backCard: cardSet.backCard, correct: null }) })))\n    if (ordering === \"shuffle\") {\n      // Carry out the Fisher-Yates (Knuth) shuffle.\n      let n = newTestCardSet.length, i;\n\n      // While there are still elements to shuffle.\n      while (n) {\n\n        // Random index\n        i = Math.floor(Math.random() * n--);\n\n        // Swap with end element\n        [newTestCardSet[n], newTestCardSet[i]] = [newTestCardSet[i], newTestCardSet[n]]\n\n      };\n    }\n    setTestCardSet(newTestCardSet);\n    setShowFront(frontToBack === \"frontFirst\" ? true : (frontToBack === \"backFirst\" ? false : Math.random() < 0.5));\n    setProgress(0);\n    if (fullCardSets.length === 0) {\n      setTestAlert(\"empty\");\n    } else if (newTestCardSet.length === 0) {\n      setTestAlert(\"select\");\n    } else {\n      setLeftDrawer(false);\n    };\n  };\n\n  const handleProgressChange = (value) => {\n    // Doing this way so that it can be generalised in future (e.g. might set value to be equal to the length of the testSets for skipping to start/end)\n    let newProgress;\n    if (value < 0) {\n      newProgress = Math.max(0, progress + value);\n    } else {\n      newProgress = Math.min(testCardSet.length - 1, progress + value);\n    };\n    if (newProgress !== progress) {\n      setShowFront(frontToBack === \"frontFirst\" ? true : (frontToBack === \"backFirst\" ? false : Math.random() < 0.5));\n    } else if (value > 0 && testCardSet.length > 0) {\n      setTestCompletedOpen(true);\n    };\n    setProgress(newProgress);\n  };\n\n  const handleShowFront = () => {\n    setShowFront(!showFront);\n  };\n\n  const handleCorrectChange = (isCorrect) => {\n    if (testCardSet.length === 0) {\n      return;\n    }\n    const newTestCardSet = testCardSet.slice();\n    newTestCardSet.splice(progress, 1, { ...testCardSet[progress], ...{ correct: isCorrect } });\n    setTestCardSet(newTestCardSet);\n    // We move to the next card as long as it's a \"positive action\" (rather than corrective)\n    if (isCorrect !== null) {\n      handleProgressChange(1);\n    }\n  };\n\n  const handleCompletedClose = (value) => {\n    setTestCompletedOpen(false);\n    if (value === \"new\") {\n      setLeftDrawer(true);\n    } else if (value === \"restart\") {\n      handleTestCardSetSelected();\n    } else if (value === \"review\") {\n      const newTestCardSet = testCardSet.filter(cardSet => cardSet.correct === false);\n      setTestCardSet(newTestCardSet);\n      setShowFront(frontToBack === \"frontFirst\" ? true : (frontToBack === \"backFirst\" ? false : Math.random() < 0.5));\n      setProgress(0);\n    }\n  };\n\n  const handleHelpOpen = (value) => {\n    setHelpOpen(value);\n  };\n\n  const handleTestAlertClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      setTestAlert(null); // could just have one line but leaving in this format in case we want to change in future.\n      return;\n    }\n    setTestAlert(null);\n  };\n\n  const handleTestAlertCreate = () => {\n    setTestAlert(null);\n    setLeftDrawer(false);\n    setRightDrawer(true);\n  };\n\n  const handleSuccessAlert = (value) => {\n    setSuccessAlert(value);\n  };\n\n  const handleSuccessClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      //setSuccessAlert(null);\n      return;\n    }\n    setSuccessAlert(null);\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Paper>\n        <Container maxWidth=\"lg\" className={classes.root}>\n          <AppBar position=\"static\">\n            <Toolbar>\n              <Grid container>\n                <Grid item xs={5} container alignItems=\"center\" justifyContent=\"flex-start\">\n                  <IconButton edge=\"start\" onClick={() => setLeftDrawer(true)}>\n                    <MenuIcon />\n                  </IconButton>\n                  <Typography variant=\"h6\">\n                    Test config\n                  </Typography>\n                </Grid>\n                <Grid item xs={2} container alignItems=\"center\" justifyContent=\"center\">\n                  <IconButton edge=\"start\" onClick={() => setHelpOpen(!helpOpen)}>\n                    <HelpIcon />\n                  </IconButton>\n                </Grid>\n                <Grid item xs={5} container alignItems=\"center\" justifyContent=\"flex-end\">\n                  <Typography variant=\"h6\">\n                    Card sets\n                  </Typography>\n                  <IconButton edge=\"end\" onClick={() => setRightDrawer(true)}>\n                    <MenuIcon />\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Toolbar>\n          </AppBar>\n          <HelpBackdrop\n            helpOpen={helpOpen}\n            handleHelpOpen={handleHelpOpen}\n          />\n          <TestConfigDrawer\n            leftDrawer={leftDrawer}\n            handleLeftDrawer={handleLeftDrawer}\n            ordering={ordering}\n            handleOrdering={(order) => setOrdering(order)}\n            frontToBack={frontToBack}\n            handleFrontToBack={(fTB) => setFrontToBack(fTB)}\n            fullCardSets={fullCardSets}\n            handleDeleteSelected={handleDeleteSelected}\n            selectedCardSets={selectedCardSets}\n            handleCardSetSelected={handleCardSetSelected}\n            handleSelectAll={handleSelectAll}\n            handleTestCardSetSelected={handleTestCardSetSelected}\n            testAlert={testAlert}\n            handleTestAlertClose={handleTestAlertClose}\n            handleTestAlertCreate={handleTestAlertCreate}\n          />\n          <CardSetsDrawer\n            rightDrawer={rightDrawer}\n            handleRightDrawer={handleRightDrawer}\n            handleSubmitCardSet={handleSubmitCardSet}\n            fullCardSets={fullCardSets}\n            successAlert={successAlert}\n            handleSuccessAlert={handleSuccessAlert}\n            handleSuccessClose={handleSuccessClose}\n            handleDownloadSettings={handleDownloadSettings}\n            handleSaveLocalStorage={handleSaveLocalStorage}\n            handleRefreshLocalStorage={handleRefreshLocalStorage}\n            handleLocalStorageDialogClose={handleLocalStorageDialogClose}\n          />\n          <Container maxWidth=\"sm\" style={{ height: \"calc(100vh - 64px)\" }}>\n            <Grid container spacing={2} alignItems=\"center\" style={{ height: \"100%\" }}>\n              <Grid item xs={12} style={{ height: \"70%\" }}>\n                <Flashcard\n                  frontCard={testCardSet.length === 0 ? \"Front of card\" : testCardSet[progress].frontCard}\n                  backCard={testCardSet.length === 0 ? \"Back of card\" : testCardSet[progress].backCard}\n                  frontValue={testCardSet.length === 0 ? \"Front value\" : testCardSet[progress].frontValue}\n                  backValue={testCardSet.length === 0 ? \"Back value\" : testCardSet[progress].backValue}\n                  showFront={showFront}\n                  handleShowFront={handleShowFront}\n                  handleProgressChange={handleProgressChange}\n                  correct={testCardSet.length === 0 ? null : testCardSet[progress].correct}\n                  handleCorrectChange={handleCorrectChange}\n                />\n              </Grid>\n              <Grid item xs={12} container alignItems=\"center\" spacing={1}>\n                <Grid item xs={10}>\n                  <LinearProgress variant=\"determinate\" value={testCardSet.length === 0 ? 0 : 100 * (progress + 1) / testCardSet.length} />\n                </Grid>\n                <Grid item xs={2} container justifyContent=\"flex-end\">\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    {`${testCardSet.length === 0 ? 0 : progress + 1} / ${testCardSet.length}`}\n                  </Typography>\n                </Grid>\n              </Grid>\n              <Grid item xs={12} container alignItems=\"center\" spacing={1}>\n                <Grid item xs={5} container justifyContent=\"flex-end\">\n                  <CancelIcon color=\"primary\" />\n                </Grid>\n                <Grid item xs={1} container justifyContent=\"flex-start\">\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    {`: ${incorrectCards}`}\n                  </Typography>\n                </Grid>\n                <Grid item xs={2} container justifyContent=\"flex-end\">\n                  <CheckCircleIcon color=\"primary\" />\n                </Grid>\n                <Grid item xs={2} container justifyContent=\"flex-start\">\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    {`: ${correctCards}`}\n                  </Typography>\n                </Grid>\n                <Grid item xs={2}>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    {correctCards + incorrectCards === 0 ? \"n/a\" : `${Math.round(100 * correctCards / (correctCards + incorrectCards))}%`}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n            <TestCompletedDialog\n              open={testCompletedOpen}\n              numcards={testCardSet.length}\n              numcorrect={correctCards}\n              numincorrect={incorrectCards}\n              handleCompletedClose={handleCompletedClose}\n            />\n          </Container>\n        </Container >\n      </Paper>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}